{
  "hash": "e30a299607290f1f1ac2092c903ca484",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Setting-up [GENODESY]{.tm}'\ndate: \"2022-11-02\"\ndescription: 'Sharing experience regarding the creation of the [GENODESY]{.tm} website and related web services'\ncategories:\n   - infrastructure\nimage: \"images/Build-website.jpg\"\n---\n\n\n![](images/Build-website.jpg){fig-alt=\"Website construction illustration adapted from https://commons.wikimedia.org/wiki/File:Build-website.jpg\" width=\"800\"}\n\nAfter having bought the domain name a few years ago, I've finally decided to setup the [GENODESY]{.tm} website and related resources. Here, I share my experience regarding this process: the tools and services I relied on and the design and technical choices I made.\n\nMy intend was to setup, not only a website and a blog, but also some services such as [Shiny](https://shiny.rstudio.com/) applications, [Neo4j](https://neo4j.com/) and [ClickHouse](https://clickhouse.com/) databases. That's why I chose to rent a dedicated server that I configured and that I'm administrating myself. I spent time in tuning the configuration of the different services in order to make them as accessible as possible to the users:\n\n-   All the services are reachable from the same root: <https://genodesy.org>.\n-   All the services are provided through the same secure SSL connection.\n\n## Hosting the services\n\nThere are many companies providing capabilities for hosting web pages and web services. Here, I chose [OVHCloud](https://www.ovhcloud.com/), a french cloud computing company. I went for the first option in the *kimsufi* range of dedicated servers:\n\n-   CPU: Intel Xeon E3-1245v2 - 4c/8t - 3.4 GHz/3.8 GHz\n-   Memory: 32 GB DDR3\n-   Storage: 3 x 2 TB HDD SATA Soft RAID\n-   OS: Ubuntu Server 22.04 LTS \"Jammy Jellyfish\"\n\nI also bought the genodesy domain names (.org, .com, .net, .info and .biz) to [OVHCloud](https://www.ovhcloud.com/) and it was easy to map *genodesy.org* to the server IP address in the DNS (Domain Name System) using their configuration tool.\n\n## Web server and reverse proxy\n\n### NGINX configuration {#sec-nginx}\n\nI chose the [NGINX](https://nginx.org/en/) web server to make the website available. NGINX can also be used as a reverse proxy, and I took advantage of this feature to provide other services.\n\nI followed the following tutorials to get familiar with NGINX configuration:\n\n-   [Install NGINX in Ubuntu (digital ocean)](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04)\n-   [Self-signed SSL certificates for NGINX (digital ocean)](https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-20-04-1)\n-   Reverse proxy configuration:\n    -   [How to forward an http request to another port?](https://serverfault.com/questions/536576/nginx-how-do-i-forward-an-http-request-to-another-port)\n    -   [Running a Shiny server with a proxy](https://support.rstudio.com/hc/en-us/articles/213733868-Running-Shiny-Server-with-a-Proxy)\n\nI configured the *genodesy.org* server block to setup the following behaviors:\n\n-   redirect http (80) queries to the https (443) port\n-   provide services through the https (443) port using a valid SSL (Secure Sockets Layer) certificate\n-   proxy pass queries to specific path to services using different ports (e.g. shiny or neo4j)\n\nHere is the server block configuration file I've finally written:\n\n``` {.sh filename=\"/etc/nginx/sites-available/genodesy.org\"}\n\n# Queries to the http (80) port are redirected to the https (443) port\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name genodesy.org www.genodesy.org;\n    \n    location / {\n        return 301 https://$server_name$request_uri;\n    }\n    \n    root /var/www/genodesy.org/html;\n    index index.html;\n    \n    # The following folder is used to verify the domain of issued SSL\n    # certificate and therefore is still accessible through the http (80) port.\n    location /.well-known/pki-validation/ {\n        try_files $uri $uri/ =404;\n    }\n}\n\n# Services are provided through the https (443) port\nserver {\n        listen 443 ssl http2 default_server;\n        listen [::]:443 ssl http2 default_server;\n        \n        # The files included below are used for SSL configuration\n        include snippets/ssl-for-free.conf;\n        include snippets/ssl-params.conf;\n\n\n        root /var/www/genodesy.org/html;\n        index index.html index.htm index.nginx-debian.html;\n        \n        error_page 404 /404.html;\n\n        server_name genodesy.org www.genodesy.org;\n\n        # The main web server\n        location / {\n                try_files $uri $uri/ =404;\n        }\n        \n        # Reverse proxy to the BED Neo4j database hosted on port 5454\n        location /BED {\n            rewrite ^/BED/?(.*)$ /$1 break;\n            proxy_pass http://genodesy.org:5454/browser;\n            proxy_redirect / $scheme://$http_host/BED;\n        }\n        \n        # Reverse proxy to Shiny hosted on port 3838\n        rewrite ^/shiny$ $scheme://$http_host/shiny/ permanent;\n        location /shiny/ {\n            rewrite ^/shiny/(.*)$ /$1 break;\n            proxy_pass http://genodesy.org:3838;\n            proxy_redirect / $scheme://$http_host/shiny/;\n        }\n        \n}\n```\n\n### SSL certificate\n\nI created a free valid SSL certificate on [SSL For Free](https://www.sslforfree.com/).\n\n::: callout-warning\n## Certificate chain file in NGINX\n\nIn NGINX, the `ca_bundle.crt` certificate chain file must be appended to the `certificate.crt` file to make it valid and allow the verification of the domain by [ZeroSSL](https://zerossl.com/). (tip found [here](https://blog.steven266.de/include-a-certificate-chain-file-in-nginx-6dca9acdcbb6))\n:::\n\n### Firewall\n\nThe [Uncomplicated Firewall (UFW)](https://www.linux.com/training-tutorials/introduction-uncomplicated-firewall-ufw/) was used to allow connections only to specific ports supporting protocols of interest: ssh (22), http (80) and https (443).\n\n``` sh\nsudo apt-get install ufw\nsudo ufw enable\nsudo ufw allow 22/tcp\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n```\n\n## Creating and managing the website\n\n### Implementation\n\nAs an [R](https://www.r-project.org/) user and a big fan of tools developed by the [Posit PBC](https://posit.co/) team, I'm relying on [Quarto](https://quarto.org/) to create and manage the content of this website.\n\nThere are many documentation resources regarding the Quarto publishing system, starting by the extensive [official guide](https://quarto.org/docs/guide/). Quarto has a lot of features and I don't intend (to even try) to list all of them here. Instead, here are a few points on which I put particular attention or that I found particularly handy:\n\n-   [Traffic information with Google analytics](https://quarto.org/docs/websites/website-tools.html#google-analytics)\n\n-   [Blogging](https://quarto.org/docs/websites/website-blog.html)\n\n-   [About page](https://quarto.org/docs/websites/website-about.html)\n\n-   [Cookie consent](https://quarto.org/docs/websites/website-tools.html#cookie-consent)\n\n-   The creation of an **RSS feeds** focused on different categories is straightforward as explained in [Quarto documentation](https://quarto.org/docs/websites/website-blog.html#rss-feed)\n\n-   **Post comments** can be easily allowed and managed with [utterances](https://utteranc.es/) as explained in this [Albert Rapp blog post](https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html#interact-with-your-audience) (the visitor need a github account to be allowed to comment)\n\n-   [Management of non-existent web page](https://quarto.org/docs/websites/website-navigation.html#pages-404)\n\n-   [Styling](https://quarto.org/docs/output-formats/html-themes.html) is very easy with themes, but customization can take a lot of time. This [Albert Rapp video and related links](https://www.youtube.com/watch?v=ErRX8plZpQE) can help to start.\n\n### Content organization\n\nCurrently, the [GENODESY]{.tm} website is organized in the following four main parts. As this site is pretty new, it will hopefully grow and evolve.\n\n-   **Home**: this part is empty for the moment. My intend is to point to the different contents and resources offered on this site.\n\n-   **Services**: applications, databases or APIs made available on this site.\n\n-   **Author**: who I am and what I've done.\n\n-   **Blog**: standalone topics addressing more or less technical issues or experiences. I moved this blog on my personal website which, I think, is more relevant.\n\n## Other services\n\nOne of the advantages of using a reverse proxy such as [NGINX](https://nginx.org/en/) is that we can focus on\nservices installation without having to worry too much about how to secure their access. I've shown [above](#sec-nginx) how I configured NGINX to provide an access to a Neo4j API and to Shiny applications through SSL encryption. The paragraphs below explain how the services themselves were installed and can be used.\n\n### BED Neo4j database\n\n[BED](https://patzaw.github.io/BED/) (Biological Entity Dictionary) is an R package to get and explore mapping between identifiers of biological entities (BE). It relies on a [Neo4j](https://neo4j.com/) database in which the relationships between the identifiers from different sources are recorded. I made an instance of the BED Neo4j database available on this server to allow people to easily test the package and its capabilities.\n\nThe BED Neo4j database was installed as [docker](https://www.docker.com/) container, using the [`S05-BED-Container.sh` script](https://github.com/patzaw/BED/blob/master/supp/Build/S05-BED-Container.sh).\n\nThe access to the 5454 port is denied by the firewall, but NGINX provides a secure access to this resource via this path: `https://genodesy.org/BED/`. Therefore, external users can connect to the BED database in R as follows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(BED)\nconnectToBed(url=\"https://genodesy.org/BED/\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhttps://genodesy.org/BED/\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBED\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUCB-Human\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n2024.01.14\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCache OFF\n```\n\n\n:::\n:::\n\n### Shiny server\n\n[Shiny](https://shiny.rstudio.com/) is an R package to build interactive web apps straight from R. These apps can be easily deployed on services such as [shinyapps.io](https://www.shinyapps.io/). It is also possible to host them within a Shiny Server instance. \n\nThe Shiny Server was simply installed following the instructions provided in the [official administrator's guide](https://docs.rstudio.com/shiny-server/).\n\nAgain, the access to the 5454 port is denied by the firewall, but NGINX provides a secure access to this resource via this path: `https://genodesy.org/shiny/`. Here is an example of a Shiny app hosted on *genodesy.org* : [https://genodesy.org/shiny/ReDaMoR](https://genodesy.org/shiny/ReDaMoR).\n\n## License\n\nI chose to release the content of this website under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}